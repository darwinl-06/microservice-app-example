trigger:
  - main
  - master

variables:
  dockerRegistryServiceConnection: 'ACR-CONNECTION-REAL'
  containerRegistry: 'acrmicroappyb6znq.azurecr.io'
  tag: '$(Build.BuildId)'
  resourceGroup: 'rg-microservice-app'

stages:
- stage: Build
  displayName: 'Build and Push Images'
  jobs:
  - job: BuildAndPushImages
    displayName: 'Build and Push All Microservices'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      displayName: 'Build and Push auth-api'
      inputs:
        command: buildAndPush
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: 'auth-api'
        dockerfile: '$(System.DefaultWorkingDirectory)/auth-api/Dockerfile'
        buildContext: '$(System.DefaultWorkingDirectory)/auth-api'
        tags: |
          $(tag)
          latest

    - task: Docker@2
      displayName: 'Build and Push frontend'
      inputs:
        command: buildAndPush
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: 'frontend'
        dockerfile: '$(System.DefaultWorkingDirectory)/frontend/Dockerfile'
        buildContext: '$(System.DefaultWorkingDirectory)/frontend'
        tags: |
          $(tag)
          latest

    - task: Docker@2
      displayName: 'Build and Push log-message-processor'
      inputs:
        command: buildAndPush
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: 'log-message-processor'
        dockerfile: '$(System.DefaultWorkingDirectory)/log-message-processor/Dockerfile'
        buildContext: '$(System.DefaultWorkingDirectory)/log-message-processor'
        tags: |
          $(tag)
          latest

    - task: Docker@2
      displayName: 'Build and Push todos-api'
      inputs:
        command: buildAndPush
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: 'todos-api'
        dockerfile: '$(System.DefaultWorkingDirectory)/todos-api/Dockerfile'
        buildContext: '$(System.DefaultWorkingDirectory)/todos-api'
        tags: |
          $(tag)
          latest

    - task: Docker@2
      displayName: 'Build and Push users-api'
      inputs:
        command: buildAndPush
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: 'users-api'
        dockerfile: '$(System.DefaultWorkingDirectory)/users-api/Dockerfile'
        buildContext: '$(System.DefaultWorkingDirectory)/users-api'
        tags: |
          $(tag)
          latest

- stage: Deploy
  displayName: 'Update Container Apps'
  dependsOn: Build
  jobs:
  - job: UpdateAuthApi
    displayName: 'Update Auth API'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Update Auth API Container App'
      inputs:
        azureSubscription: 'AzureServiceConnect'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Deploying Auth API to Container App..."
          az containerapp update -n auth-api -g $(resourceGroup) --image $(containerRegistry)/auth-api:latest
          
          if [ $? -eq 0 ]; then
            echo "Stopping Auth API..."
            az containerapp stop --name auth-api --resource-group $(resourceGroup)
            echo "Starting Auth API..."
            az containerapp start --name auth-api --resource-group $(resourceGroup)
            echo "Auth API restart (stop/start) successful"
          else
            echo "Auth API deployment failed"
            exit 1
          fi

  - job: UpdateUsersApi
    displayName: 'Update Users API'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Update Users API Container App'
      inputs:
        azureSubscription: 'AzureServiceConnect'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Deploying Users API to Container App..."
          az containerapp update -n users-api -g $(resourceGroup) --image $(containerRegistry)/users-api:latest
          
          if [ $? -eq 0 ]; then
            echo "Stopping Users API..."
            az containerapp stop --name users-api --resource-group $(resourceGroup)
            echo "Starting Users API..."
            az containerapp start --name users-api --resource-group $(resourceGroup)
            echo "Users API restart (stop/start) successful"
          else
            echo "Users API deployment failed"
            exit 1
          fi

  - job: UpdateTodosApi
    displayName: 'Update Todos API'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Update Todos API Container App'
      inputs:
        azureSubscription: 'AzureServiceConnect'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Deploying Todos API to Container App..."
          az containerapp update -n todos-api -g $(resourceGroup) --image $(containerRegistry)/todos-api:latest
          
          if [ $? -eq 0 ]; then
            echo "Stopping Todos API..."
            az containerapp stop --name todos-api --resource-group $(resourceGroup)
            echo "Starting Todos API..."
            az containerapp start --name todos-api --resource-group $(resourceGroup)
            echo "Todos API restart (stop/start) successful"
          else
            echo "Todos API deployment failed"
            exit 1
          fi

  - job: UpdateLogProcessor
    displayName: 'Update Log Processor'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Update Log Processor Container App'
      inputs:
        azureSubscription: 'AzureServiceConnect'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Deploying Log Processor to Container App..."
          az containerapp update -n log-processor -g $(resourceGroup) --image $(containerRegistry)/log-message-processor:latest
          
          if [ $? -eq 0 ]; then
            echo "Stopping Log Processor..."
            az containerapp stop --name log-processor --resource-group $(resourceGroup)
            echo "Starting Log Processor..."
            az containerapp start --name log-processor --resource-group $(resourceGroup)
            echo "Log Processor restart (stop/start) successful"
          else
            echo "Log Processor deployment failed"
            exit 1
          fi

  - job: UpdateFrontend
    displayName: 'Update Frontend'
    dependsOn: [UpdateAuthApi, UpdateUsersApi, UpdateTodosApi]
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Update Frontend Container App'
      inputs:
        azureSubscription: 'AzureServiceConnect'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Deploying Frontend to Container App..."
          az containerapp update -n frontend -g $(resourceGroup) --image $(containerRegistry)/frontend:latest
          
          if [ $? -eq 0 ]; then
            echo "Stopping Frontend..."
            az containerapp stop --name frontend --resource-group $(resourceGroup)
            echo "Starting Frontend..."
            az containerapp start --name frontend --resource-group $(resourceGroup)
            echo "Frontend restart (stop/start) successful"
          else
            echo "Frontend deployment failed"
            exit 1
          fi
